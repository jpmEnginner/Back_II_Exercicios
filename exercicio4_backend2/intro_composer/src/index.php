<?php
require "../vendor/autoload.php";
use Illuminate\Support\Str;
use Jpm\IntroComposer\classes\Medico;
use Jpm\IntroComposer\logs\Relatorio;
use Jpm\IntroComposer\classes\Atleta;

// classe abstrata serve como modelo base para construir outras classes ()

/**
 * 
 * 
 * Uma breve explica√ß√£o sobre classes abstratas, interfaces e polimorfismo no PHP
 
 * ===============================================
 * CLASSE ABSTRATA vs INTERFACE - GUIA R√ÅPIDO
 * ===============================================
 * 
 * CLASSE ABSTRATA:
 * - Serve como "base comum" para classes similares (ex: 3 tipos de usu√°rios)
 * - Pode ter m√©todos J√Å IMPLEMENTADOS (c√≥digo reutiliz√°vel)
 * - Pode ter PROPRIEDADES ($nome, $email, etc)
 * - Pode ter m√©todos ABSTRATOS (for√ßa implementa√ß√£o nas filhas) ,os normais nao precisa ser reimplementados
 * - Uma classe s√≥ pode HERDAR de UMA classe abstrata (extends)
 * - Use quando: classes t√™m caracter√≠sticas SIMILARES e c√≥digo COMUM
 


 * INTERFACE:
 * - √â um "contrato" que define APENAS assinaturas de m√©todos
 * - N√ÉO pode ter implementa√ß√µes (s√≥ a partir PHP 8)
 * - N√ÉO pode ter propriedades (atributos)
 * - TODOS os m√©todos devem ser implementados
 * - Uma classe pode implementar M√öLTIPLAS interfaces (implements)
 * - Use quando: quer garantir que classes tenham determinados COMPORTAMENTOS
 * 
 * 
 * 
 * POLIMORFISMO = "Muitas formas"
 * 
 * üé≠ DEFINI√á√ÉO SIMPLES:
 * √â a capacidade de um mesmo c√≥digo funcionar com diferentes tipos de objetos - seria 
 * Mesma "interface", comportamentos diferentes - mesma funcao so que ela faz algo diferente pra cada objeto
 * 
 * √â como um bot√£o "REPRODUZIR":
 * - No Spotify ‚Üí Toca m√∫sica üéµ
 * - Na Netflix ‚Üí Reproduz filme üé¨  
 * - No YouTube ‚Üí Reproduz v√≠deo üì∫
 * - No PowerPoint ‚Üí Inicia apresenta√ß√£o üìä
 * 
 * mesmo botao ,acoes diferentes 
 * 
 * üéØ NO PHP:
 * - Mesmo m√©todo, implementa√ß√µes diferentes
 * - Uma vari√°vel pode receber diferentes tipos de objeto
 * - O m√©todo correto √© chamado automaticamente
 **/

//implementando o uso de Traits no PHP

$atleta = new Atleta("Jo√£o Silva", 25, 1.75, 60);
echo $atleta;


//implementando interface iFuncionario (usando classe Medico)

$medico = new Medico("Paulo Paix√£o", 12345, "Fisiologista", 15000, 1.9, 65);
$jogador = new Atleta("Pedro Geromel", 19, 1.84,60);

$relatorio = new Relatorio;
$relatorio->add($medico);
$relatorio->add($jogador);
$relatorio->imprime();


$texto = "ESTE TEXTO EST√Å EM MAI√öSCULO";
$resultado = Str::lower($texto);
echo $resultado; 

// var_dump($dotenv);

echo "<hr>";

//var_dump($_ENV['SECRET_KEY']);